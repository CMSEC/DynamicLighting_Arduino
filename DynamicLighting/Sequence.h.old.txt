#pragma once
namespace CMSEC
{
	class Sequence
	{
	private:
		struct Node
		{
		public:
			Node() {};
			Node(Colour _value)
			{
				value = _value;
			};
			~Node() {};

			Node* previous;
			Node* next;
			Colour value;
		};
	public:

		Colour* data = 0;

		Sequence() {}
		Sequence(uint16_t _size)
		{
			count = _size;
			/*for (uint16_t i = 0; i < _size; i++)
			{
				//head = Insert(new Node(), Colour());
			}*/
			if (data != 0) {
				delete[] data;
			}
			data = new Colour[_size];
		}
		~Sequence() {};

		Node* Set(uint16_t _position, Colour _value)
		{
			Node* current = NULL;
			uint16_t location = 0;
			while (current != NULL && location < _position)
			{
				if (location == _position)
					current->value = _value;
				else
					current = current->next;
				location++;
			}
		}
		Node* Set(uint16_t _position, uint32_t _value)
		{
			Set(_position, Colour(_value));
		}

		Colour At(uint16_t _position)
		{
			Node* current = NULL;
			uint16_t location = 0;
			while (current != NULL && location < _position)
			{
				if (location == _position)
					return current->value;
				else
					current = current->next;
				location++;
			}
		}

		Node* root = NULL;
		Node* head = NULL;
		uint16_t count = 0;

	private:
		Node* Insert(Node* _node, Colour _value)
		{
			if (_node == nullptr)
				return Create(_value, _node);
			_node->next = Insert(_node->next, _value);
			return _node;
		}
		Node* Create(Colour _value, Node* _node = NULL)
		{
			Node* newNode = new Node(_value);
			newNode->next = _node;
			return newNode;
		}
	};
}